<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/task
						http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- exclude：排除，不包括; 排斥; 驱除，赶出 -->
	<!-- <context:component-scan base-package="com.ssm.*"> -->
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.ssm">
	    <!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
	    <!-- <context:include-filter type="regex" expression="com.ssm.*.(Controller|Service|Repository)"/> -->
		<!-- <context:include-filter type="regex" expression="com.ssm.quartz.*"/> -->
		<!-- 看下，Component组件标签的作用 -->
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Component"/> -->
	</context:component-scan>

	<!--aspectj 驱动器 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<!--<bean class="com.ssm.common.multiDataSource.DataSourceAspect"/>-->

	<task:annotation-driven/>

	<!-- **************************************引入配置文件*******************************************-->

	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:properties/mysql.properties</value>
				<!--<value>classpath*:app.properties</value>-->
			</list>
		</property>
	</bean>

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="fileEncoding" value="UTF-8"/>
		<property name="properties" ref="configProperties"/>
	</bean>

	<!-- **************************************引入配置文件【结束】*******************************************-->

	<!-- *****************************多数据源配置*******************************************-->

	<!-- 配置数据源Master -->
	<bean id="wwMysqlDS" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://172.18.1.122:3306/otctest?serverTimezone=GMT%2B8"/>
		<property name="username" value="otc"/>
		<property name="password" value="Otc_2019Te"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="6000"/>

		<!-- 配置初始化大小、最小、最大 -->
		<!--<property name="initialSize" value="${ds.initialSize}"/>
		<property name="minIdle" value="${ds.minIdle}"/>
		<property name="maxActive" value="${ds.maxActive}"/>-->

		<!--<property name="validationQuery" value="${ds.validationQuery}"/>
		<property name="testWhileIdle" value="${ds.testWhileIdle}"/>
		<property name="testOnBorrow" value="${ds.testOnBorrow}"/>
		<property name="testOnReturn" value="${ds.testOnReturn}"/>-->

		<!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
		<property name="filters" value="${ds.filters}"/>

		&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;
		<property name="logAbandoned" value="${ds.logAbandoned}"/>-->
	</bean>

	<!-- 配置数据源Slave -->
	<!-- class="org.apache.commons.dbcp.BasicDataSource" -->
	<bean id="wwOracleDS" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@172.18.1.40:1521/EIP3DEV" />
		<property name="username" value="UCENTER" />
		<property name="password" value="HuaMing" />
		<property name="initialSize" value="0" />
		<property name="maxActive" value="20" />
		<property name="maxWait" value="60000" />
	</bean>

	<bean id="aliMysqlDS" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://172.18.1.122:3306/otcdev?serverTimezone=GMT%2B8"/>
		<property name="username" value="otc"/>
		<property name="password" value="Otc_2019Te"/>
		<property name="initialSize" value="0" />
		<property name="maxActive" value="20" />
		<property name="maxWait" value="60000" />
	</bean>

	<!-- ******************************多数据源配置【结束】*****************************************-->

	<!-- *************************** 实现多数据源切换的XML配置 *************************************
		我们针对 三个 数据库分别定义了aliMysqlDS、wwOracleDS和wwMysqlDS 三个 dataSource，
		然后注入到<bean id="dataSource" class="**.ThreadLocalRountingDataSource"> 中，
		这样我们的dataSource就可以来根据 key 的不同来选择对应数据源
	-->

	<!-- 数据源dataSource配置（数据源就这一处配置），因为要配置多数据源，定义 ThreadLocalRountingDataSource，继承AbstractRoutingDataSource -->
	<bean id="dataSource" class="com.ssm.common.multiDataSource.ThreadLocalRountingDataSource">
		<property name="defaultTargetDataSource" ref="aliMysqlDS" />
		<property name="targetDataSources">
			<map key-type="com.ssm.common.multiDataSource.DataSourceEnum">
				<entry key="wwMysql" value-ref="wwMysqlDS"/>
				<entry key="wwOracle" value-ref="wwOracleDS"/>
				<entry key="aliMysql" value-ref="aliMysqlDS"/>
				<!-- 这里还可以加多个dataSource -->
			</map>
		</property>
	</bean>

	<!-- ********下面是 整合mybatis 和 jpa 的配置 **************-->

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件（几个意思？） -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
		<!--<property name="typeAliasesPackage" value="com.xxx.culture.domain"/>-->
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mybatis/**/*.xml"/>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类，不用Mapper的配置 -->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssm.*.dao"/>
	</bean>-->

	<!-- DAO接口所在包名，Spring会自动查找其下的类，这是引用Mapper的配置 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ssm.*.dao" />
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
    </bean>

	<!-- ***********************   mybatis 事务相关控制   *********************** -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- 事务管理 通知 -->
	<!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			&lt;!&ndash; 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 &ndash;&gt;
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="flush*" propagation="REQUIRED"/>
			&lt;!&ndash; select,count,get,find开头的方法,开启只读,提高数据库访问性能 &ndash;&gt;
			<tx:method name="select*" read-only="true"/>
			<tx:method name="count*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="search*" read-only="true"/>
			&lt;!&ndash; 对其他方法 使用默认的事务管理 &ndash;&gt;
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>-->

	<!-- 事务注解支持 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>