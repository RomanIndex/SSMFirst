package com.meerkat.common.helper;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.BeanUtils;

import java.util.ArrayList;
import java.util.List;

public class POJOHelper {

    public static <P, B> List<B> po2boList(List<P> poList, Class<B> boClass) {
        return assemble(poList, boClass);
    }

    public static <P, B> B po2boObject(P poObject, Class<B> boClass) {
        return copyProperties(poObject, boClass);
    }

    /**
     * 通过 tClass 生成示例并且将 source 对应的字段 copy
     *
     * @param source 源对象
     * @param tClass 期望对象类型
     * @param <S>    源对象
     * @param <T>    期望对象
     * @return 期望对象实例
     */
    public static <S, T> T copyProperties(S source, Class<T> tClass) {
        try {
            T target = tClass.newInstance();
            if (null == source) {
                return target;
            }
            BeanUtils.copyProperties(source, target);
            return target;
        } catch (InstantiationException | IllegalAccessException e) {
            throw new RuntimeException(String.format("%s must declaring none arguments constructor!", tClass.getTypeName()));
        }
    }

    /**
     * 根据类型生成，生成转换的新列表
     *
     * @param tClass 目标列表类型
     * @param list   原列表数据
     * @param <S>    source class
     * @param <T>    target class
     * @return 目标列表
     */
    public static <S, T> List<T> assemble(List<S> list, Class<T> tClass) {
        if (CollectionUtils.isEmpty(list)) {
            return new ArrayList<>();
        }
        List<T> targetList = new ArrayList<>(list.size());
        for (S s : list) {
            targetList.add(POJOHelper.copyProperties(s, tClass));
        }
        return targetList;
    }

}
